#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        JEVAmet_VCU.py
#
#  Project :     JEVAmet_VCU
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["JEVAmet_VCU", "JEVAmet_VCUClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(JEVAmet_VCU.additionnal_import) ENABLED START -----#
from VCU_protocol import VCU_protocol
import threading
import time
#----- PROTECTED REGION END -----#	//	JEVAmet_VCU.additionnal_import

# Device States Description
# No states for this device


class JEVAmet_VCU (PyTango.Device_4Impl):
    """JEVAmet_VCU"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(JEVAmet_VCU.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        JEVAmet_VCU.init_device(self)
        #----- PROTECTED REGION ID(JEVAmet_VCU.__init__) ENABLED START -----#
        if not 'pingthread' in dir(self):
            self.pingthread = threading.Thread(target=self.periodic_device_ping)
            self.pingthread.setDaemon(True)
            self.pingthread.start()        
        #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(JEVAmet_VCU.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Vacuum_read = 0.0
        #----- PROTECTED REGION ID(JEVAmet_VCU.init_device) ENABLED START -----#
        self.attr_On_read = False
        self.createReconnectTriggerAttribute()
        self.connectToHardware()
        #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(JEVAmet_VCU.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.always_executed_hook

    # -------------------------------------------------------------------------
    #    JEVAmet_VCU read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_Vacuum(self, attr):
        self.debug_stream("In read_Vacuum()")
        #----- PROTECTED REGION ID(JEVAmet_VCU.Vacuum_read) ENABLED START -----#
        if self.hwcommun.connected:
            self.attr_Vacuum_read = self.hwcommun.vacuum()
            print (self.attr_Vacuum_read)
        attr.set_value(self.attr_Vacuum_read)
        
        #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.Vacuum_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(JEVAmet_VCU.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.read_attr_hardware


    # -------------------------------------------------------------------------
    #    JEVAmet_VCU command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(JEVAmet_VCU.programmer_methods) ENABLED START -----#
    def createReconnectTriggerAttribute(self):
        attr = PyTango.Attr("Reconnect_Trigger", PyTango.DevDouble, PyTango.AttrWriteType.WRITE)
        prop = PyTango.UserDefaultAttrProp()
        prop.set_description("Triggers a reconnection attempt to the hardware.")
        attr.set_default_properties(prop)
        self.add_attribute(attr, self.read_Reconnect_Trigger, self.write_Reconnect_Trigger)
    
        
    def periodic_device_ping(self):
        if not 'hwcommun' in dir(self) or self.hwcommun==None:
            return
        while True:
            time.sleep(1.0)
            try:
                self.hwcommun.vacuum()
            except Exception as e:
                #print e
                pass
            if self.hwcommun.last_comm_timeout:
                self.set_state(PyTango.DevState.FAULT)
                print "Device ping got no answer"
            elif not self.hwcommun.connected:
                self.set_state(PyTango.DevState.OFF)
                print "Connection to device lost"
            else:
                self.set_state(PyTango.DevState.ON)
                
    def connectToHardware(self):
        if 'hwcommun' in dir(self) and self.hwcommun!=None:
            if self.hwcommun.last_comm_timeout or not self.hwcommun.connected:
                print "I will try to reconnect"
                self.hwcommun.reconnect()
                if self.hwcommun.connected==True:
                    self.set_state(PyTango.DevState.ON)
                else:
                    self.set_state(PyTango.DevState.OFF)
            else:
                print "Device has already been initialized!"
                return
        else:
            self.hwcommun = VCU_protocol(self.Hardware_IP, self.Hardware_Port)
        if (self.hwcommun.connected==True):
            self.set_state(PyTango.DevState.ON)
        else:
            self.set_state(PyTango.DevState.OFF)
            
    def read_Reconnect_Trigger(self, attr):
        attr.set_value(0.0)
        
    def write_Reconnect_Trigger(self, attr):
        self.connectToHardware()
    #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.programmer_methods

class JEVAmet_VCUClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(JEVAmet_VCU.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'Hardware_IP':
            [PyTango.DevString, 
             '',
            ["192.168.3.112"] ],
        'Hardware_Port':
            [PyTango.DevString, 
             '',
            ["100"] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'Vacuum':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'format': "%6.2f",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(JEVAmet_VCUClass, JEVAmet_VCU, 'JEVAmet_VCU')
        #----- PROTECTED REGION ID(JEVAmet_VCU.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	JEVAmet_VCU.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
